{"name": "test_dashbord_title", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=109.0.5414.120)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x00FB6643]\n\t(No symbol) [0x00F4BE21]\n\t(No symbol) [0x00E4DA9D]\n\t(No symbol) [0x00E2EF6A]\n\t(No symbol) [0x00EA3AAB]\n\t(No symbol) [0x00EB61B6]\n\t(No symbol) [0x00E9FB76]\n\t(No symbol) [0x00E749C1]\n\t(No symbol) [0x00E75E5D]\n\tGetHandleVerifier [0x0122A142+2497106]\n\tGetHandleVerifier [0x012585D3+2686691]\n\tGetHandleVerifier [0x0125BB9C+2700460]\n\tGetHandleVerifier [0x01063B10+635936]\n\t(No symbol) [0x00F54A1F]\n\t(No symbol) [0x00F5A418]\n\t(No symbol) [0x00F5A505]\n\t(No symbol) [0x00F6508B]\n\tBaseThreadInitThunk [0x778B6BD9+25]\n\tRtlGetFullPathName_UEx [0x77A08FD2+1218]\n\tRtlGetFullPathName_UEx [0x77A08F9D+1165]", "trace": "self = <Tests.test_DashBoardPage.Test_dashboard object at 0x0000027CBA853A90>\n\n    def test_dashbord_title(self):\n        self.LoginPage = LoginPage(self.driver)\n>       self.DashBoardPage = self.LoginPage.validate_login()\n\nTests\\test_DashBoardPage.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\LoginPage.py:21: in validate_login\n    self.do_send_key(self.USERNAME, TestData.USER_NAME)\nPages\\BasePage.py:31: in do_send_key\n    WebDriverWait(self.driver, 30).until(EC.visibility_of_element_located(by_locator)).send_keys(text)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:86: in until\n    value = method(self._driver)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:139: in _predicate\n    return _element_if_visible(driver.find_element(*locator))\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:830: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000027CBA7E92D0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...unk [0x778B6BD9+25]\\\\n\\\\tRtlGetFullPathName_UEx [0x77A08FD2+1218]\\\\n\\\\tRtlGetFullPathName_UEx [0x77A08F9D+1165]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=109.0.5414.120)\nE       Stacktrace:\nE       Backtrace:\nE       \t(No symbol) [0x00FB6643]\nE       \t(No symbol) [0x00F4BE21]\nE       \t(No symbol) [0x00E4DA9D]\nE       \t(No symbol) [0x00E2EF6A]\nE       \t(No symbol) [0x00EA3AAB]\nE       \t(No symbol) [0x00EB61B6]\nE       \t(No symbol) [0x00E9FB76]\nE       \t(No symbol) [0x00E749C1]\nE       \t(No symbol) [0x00E75E5D]\nE       \tGetHandleVerifier [0x0122A142+2497106]\nE       \tGetHandleVerifier [0x012585D3+2686691]\nE       \tGetHandleVerifier [0x0125BB9C+2700460]\nE       \tGetHandleVerifier [0x01063B10+635936]\nE       \t(No symbol) [0x00F54A1F]\nE       \t(No symbol) [0x00F5A418]\nE       \t(No symbol) [0x00F5A505]\nE       \t(No symbol) [0x00F6508B]\nE       \tBaseThreadInitThunk [0x778B6BD9+25]\nE       \tRtlGetFullPathName_UEx [0x77A08FD2+1218]\nE       \tRtlGetFullPathName_UEx [0x77A08F9D+1165]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: NoSuchWindowException"}, "start": 1675010333705, "stop": 1675010380499, "uuid": "25303595-676e-470c-b852-528a5da452d7", "historyId": "ca9f835054edbc79cb416807e4f712c3", "testCaseId": "124d74a92e9c22faa6832308d4ba67f9", "fullName": "Tests.test_DashBoardPage.Test_dashboard#test_dashbord_title", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('input_data_for_add_user')"}, {"name": "parentSuite", "value": "Tests"}, {"name": "suite", "value": "test_DashBoardPage"}, {"name": "subSuite", "value": "Test_dashboard"}, {"name": "host", "value": "DESKTOP-U6UTH74"}, {"name": "thread", "value": "5424-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_DashBoardPage"}]}